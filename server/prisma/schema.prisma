generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id       String   @id @unique @default(uuid())
  name     String
  email    String   @unique
  image    String?
  password String
  token    String?  @unique
  role     UserRole @default(USER)

  stores Store[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id         String      @id @unique @default(uuid())
  name       String
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  Banner     Banner[]
  Categories Category[]
  Products   Product[]
  Billboards Billboard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Sizes     Sizes[]
  Color     Color[]
}

enum BannerType {
  MAIN
  SMALL
}

model Banner {
  id        String     @id @unique @default(uuid())
  type      BannerType
  thumbnail String
  storeId   String
  store     Store      @relation(fields: [storeId], references: [id])
  productId String
  product   Product    @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                 String   @id @unique @default(uuid())
  storeId            String
  store              Store    @relation(fields: [storeId], references: [id])
  title              String
  brand              String
  categoryId         String
  categories         Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  sizesId            String?
  sizes              Sizes?   @relation(fields: [sizesId], references: [id])
  color              Color    @relation(fields: [colorId], references: [id])
  colorId            String
  description        String
  discountPercentage Int
  images             String[]
  price              Float
  rating             Int
  quantity           Int
  thumbnail          String
  IsFeatured         Boolean?
  IsFamous           Boolean?
  IsSpecial          Boolean?
  Banner             Banner[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id          String    @id @unique @default(uuid())
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  image       String?
  products    Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Billboard {
  id         String     @id @unique @default(uuid())
  storeId    String
  store      Store      @relation(fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Sizes {
  id       String    @id @unique @default(uuid())
  storeId  String
  store    Store     @relation(fields: [storeId], references: [id])
  name     String
  value    String
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id       String    @id @unique @default(uuid())
  storeId  String
  store    Store     @relation(fields: [storeId], references: [id])
  name     String
  value    String
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}